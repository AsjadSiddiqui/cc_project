# MusLang Implementation of Insertion Sort (Correct Fixed Version)
# This program creates an array and sorts it using insertion sort

# Initialize array elements (stored as individual variables)
a0 C♯ 5   # First element is 5
a1 C♯ 2   # Second element is 2
a2 C♯ 4   # Third element is 4
a3 C♯ 1   # Fourth element is 1
a4 C♯ 3   # Fifth element is 3

# Print original array
E "Original array:"
E a0
E a1
E a2
E a3
E a4

# First make a copy of original values to work with
v0 C♯ a0  # v0 = 5
v1 C♯ a1  # v1 = 2
v2 C♯ a2  # v2 = 4
v3 C♯ a3  # v3 = 1
v4 C♯ a4  # v4 = 3

# Temporary variable for swapping
temp C♯ 0

E "Starting insertion sort..."

# ------ Step 1: Sort first two elements (v0 and v1) ------
E "Step 1: Sort elements 0 and 1"
G G G            # if
v0 F♯ F♯ v1      # if v0 > v1
C C C            # begin then block
    temp C♯ v0   # temp = v0
    v0 C♯ v1     # v0 = v1
    v1 C♯ temp   # v1 = temp
E E E            # end if

# Print after step 1
E "After step 1:"
E v0
E v1
E v2
E v3
E v4

# ------ Step 2: Insert v2 into sorted portion [v0,v1] ------
E "Step 2: Insert element at index 2"
temp C♯ v2       # Store the value to insert

# Check if v2 should go before v1
G G G            # if
v1 F♯ F♯ temp    # if v1 > temp
C C C            # begin then block
    v2 C♯ v1     # v2 = v1
    
    # Check if temp should go before v0
    G G G            # if
    v0 F♯ F♯ temp    # if v0 > temp
    C C C            # begin then block
        v1 C♯ v0     # v1 = v0
        v0 C♯ temp   # v0 = temp
    E E E            # end if - (v0 > temp)
    
    # If temp should go after v0
    G G G            # if
    v0 F♯ F♯ temp    # if NOT (v0 > temp)
    C C C            # begin then block
        v1 C♯ temp   # v1 = temp
    E E E            # end if
E E E            # end if - (v1 > temp)

# Print after step 2
E "After step 2:"
E v0
E v1
E v2
E v3
E v4

# ------ Step 3: Insert v3 into sorted portion [v0,v1,v2] ------
E "Step 3: Insert element at index 3"
temp C♯ v3       # Store the value to insert

# Check if v3 should go before v2
G G G            # if
v2 F♯ F♯ temp    # if v2 > temp
C C C            # begin then block
    v3 C♯ v2     # v3 = v2
    
    # Check if temp should go before v1
    G G G            # if
    v1 F♯ F♯ temp    # if v1 > temp
    C C C            # begin then block
        v2 C♯ v1     # v2 = v1
        
        # Check if temp should go before v0
        G G G            # if
        v0 F♯ F♯ temp    # if v0 > temp
        C C C            # begin then block
            v1 C♯ v0     # v1 = v0
            v0 C♯ temp   # v0 = temp
        E E E            # end if - (v0 > temp)
        
        # If temp should go after v0
        G G G            # if
        v0 F♯ F♯ temp    # if NOT (v0 > temp)
        C C C            # begin then block
            v1 C♯ temp   # v1 = temp
        E E E            # end if
    E E E            # end if - (v1 > temp)
    
    # If temp should go after v1
    G G G            # if
    v1 F♯ F♯ temp    # if NOT (v1 > temp)
    C C C            # begin then block
        v2 C♯ temp   # v2 = temp
    E E E            # end if
E E E            # end if - (v2 > temp)

# Print after step 3
E "After step 3:"
E v0
E v1
E v2
E v3
E v4

# ------ Step 4: Insert v4 into sorted portion [v0,v1,v2,v3] ------
E "Step 4: Insert element at index 4"
temp C♯ v4       # Store the value to insert

# Check if v4 should go before v3
G G G            # if
v3 F♯ F♯ temp    # if v3 > temp
C C C            # begin then block
    v4 C♯ v3     # v4 = v3
    
    # Check if temp should go before v2
    G G G            # if
    v2 F♯ F♯ temp    # if v2 > temp
    C C C            # begin then block
        v3 C♯ v2     # v3 = v2
        
        # Check if temp should go before v1
        G G G            # if
        v1 F♯ F♯ temp    # if v1 > temp
        C C C            # begin then block
            v2 C♯ v1     # v2 = v1
            
            # Check if temp should go before v0
            G G G            # if
            v0 F♯ F♯ temp    # if v0 > temp
            C C C            # begin then block
                v1 C♯ v0     # v1 = v0
                v0 C♯ temp   # v0 = temp
            E E E            # end if - (v0 > temp)
            
            # If temp should go after v0
            G G G            # if
            v0 F♯ F♯ temp    # if NOT (v0 > temp)
            C C C            # begin then block
                v1 C♯ temp   # v1 = temp
            E E E            # end if
        E E E            # end if - (v1 > temp)
        
        # If temp should go after v1
        G G G            # if
        v1 F♯ F♯ temp    # if NOT (v1 > temp)
        C C C            # begin then block
            v2 C♯ temp   # v2 = temp
        E E E            # end if
    E E E            # end if - (v2 > temp)
    
    # If temp should go after v2
    G G G            # if
    v2 F♯ F♯ temp    # if NOT (v2 > temp)
    C C C            # begin then block
        v3 C♯ temp   # v3 = temp
    E E E            # end if
E E E            # end if - (v3 > temp)

# Print final sorted array
E "Final sorted array (internal):"
E v0
E v1
E v2
E v3
E v4

# Copy the sorted result back to original array
a0 C♯ v0
a1 C♯ v1
a2 C♯ v2
a3 C♯ v3
a4 C♯ v4  # This line was missing in the original program

# Print the final sorted array
E "Sorted array (result):"
E a0
E a1
E a2
E a3
E a4
